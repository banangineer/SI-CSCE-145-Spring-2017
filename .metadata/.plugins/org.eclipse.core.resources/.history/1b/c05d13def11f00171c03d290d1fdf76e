package date_exceptions;

public class DateConverter {
  public static String dateConverter(String anInput) 
      throws MonthException, DayException {
    // Variables
    String correctDate = "The date is "; // to be filled in later
    String[] months = {"January", "February", "March", "April", "May",
        "June", "July", "August", "October", "November", "December"};
    int month = 0;
    int day = 0;
    int slashIndex = 0;
    
    // Parse the Data so that we can isolate months and days
    slashIndex = anInput.indexOf("/");
    month = Integer.parseInt(anInput.substring(0, slashIndex));
    day = Integer.parseInt(anInput.substring(slashIndex, anInput.length()));
    
    // Based on the User Input, we should check for initial valid values
    
    // First-Level Check: General Range of Values Check
    try {
      if (month < 1 || month > 12) {
        throw new MonthException("Month Exception: Months must between " 
            + "1 and 12 inclusively.");
      } 
      else if (day < 1 || day > 31) {
        throw new DayException("Day Exception: This day is in the wrong range" 
            + " for the month provided.");
      }
    } 
    catch (MonthException e) {
      System.out.println(e);
    } 
    catch (DayException e) {
      System.out.println(e);
    }
    
    // Now that the Month is for sure Valid, we will go ahead and determine
    // the name of the month for output, and then validate that the number of
    // days is correct for the month. We don't need to check for months that
    // have exactly thirty-one days.
    correctDate = correctDate + months[month-1];
    
    // Second-Level Check: Valid Days in Respect to Month
    try {
      if (month == 2 && day > 28) {
        throw new MonthException("Month Exception: Months must between " 
            + "1 and 12 inclusively.");
      }
      else if ((month == 4 || month == 6 || month == 9 || month == 11) 
          && day > 30) {
        throw new MonthException("Month Exception: Months must between " 
            + "1 and 12 inclusively.");
      }
    }
    catch (MonthException e) {
      System.out.println(e);
    }
    
    // Because the Day in respect to Month is valid, we will append it to the 
    // return String
    correctDate = correctDate + " " + day;
    
    // Return the Correct Date
    return correctDate;
  }
}
